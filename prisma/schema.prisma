generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Domain {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  isActive        Boolean          @default(true)
  siteTitle       String?
  siteDescription String?
  logoUrl         String?
  primaryColor    String?          @default("#3B82F6")
  settings        Json?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  content         CompanyContent[] @relation("DomainContent")
  legalPages      LegalPage[]

  @@index([name, isActive])
  @@index([isActive])
  @@index([createdAt(sort: Desc)])
  @@map("domains")
}

model Company {
  id                   Int                  @id @default(autoincrement())
  name                 String
  slug                 String               @unique
  googlePlaceId        String?              @unique
  address              String?
  city                 String?
  postalCode           String?
  phone                String?
  email                String?
  website              String?
  latitude             Float?
  longitude            Float?
  businessHours        Json?
  categories           String[]
  logoUrl              String?
  coverImageUrl        String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  rating               Float?
  reviewCount          Int                  @default(0)
  isActive             Boolean              @default(true)
  cancelAtPeriodEnd    Boolean              @default(false)
  currentPeriodEnd     DateTime?
  currentPeriodStart   DateTime?
  featuredTier         String?
  featuredUntil        DateTime?
  isFeatured           Boolean              @default(false)
  stripeCustomerId     String?              @unique
  stripeSubscriptionId String?              @unique
  subscriptionEnd      DateTime?
  subscriptionStart    DateTime?
  subscriptionStatus   String               @default("active")
  subscriptionTier     String               @default("free")
  trialEnd             DateTime?
  trialStart           DateTime?
  hours                BusinessHours?
  analytics            CompanyAnalytics[]
  content              CompanyContent[]
  ownerships           CompanyOwnership[]
  subscriptions        CompanySubscription?
  coupons              Coupon[]
  customerJourney      CustomerJourney[]
  leadScores           LeadScore[]
  notifications        Notification[]
  orders               Order[]
  photos               Photo[]
  products             Product[]
  reviews              Review[]

  @@index([slug])
  @@index([city])
  @@index([isActive])
  @@index([latitude, longitude])
  @@index([rating(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@index([googlePlaceId])
  @@index([subscriptionStatus, subscriptionEnd])
  @@index([isFeatured])
  @@map("companies")
}

model CompanyContent {
  id                  Int       @id @default(autoincrement())
  companyId           Int
  domainId            Int
  isVisible           Boolean   @default(false)
  customDescription   String?
  customImages        Json?
  promotions          String?
  metaTitle           String?
  metaDescription     String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  customFields        Json?
  customTags          String[]
  featuredUntil       DateTime?
  highlightedServices String[]
  priority            Int       @default(0)
  specialOffers       String?
  company             Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  domain              Domain    @relation("DomainContent", fields: [domainId], references: [id], onDelete: Cascade)

  @@unique([companyId, domainId])
  @@index([domainId, isVisible])
  @@index([domainId, isVisible, priority(sort: Desc)])
  @@index([companyId, domainId])
  @@index([updatedAt(sort: Desc)])
  @@map("company_content")
}

model Review {
  id               Int            @id @default(autoincrement())
  companyId        Int
  authorName       String
  authorPhoto      String?
  rating           Int
  comment          String?
  source           String         @default("manual")
  reviewDate       DateTime       @default(now())
  isApproved       Boolean        @default(true)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  authorEmail      String?
  helpfulCount     Int            @default(0)
  isVerified       Boolean        @default(false)
  photos           String[]
  verifiedAt       DateTime?
  verifiedBy       String?
  commentFr        String?
  isActive         Boolean        @default(true)
  originalLanguage String         @default("en")
  reply            ReviewReply?
  reports          ReviewReport[]
  votes            ReviewVote[]
  company          Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, isApproved, reviewDate(sort: Desc)])
  @@index([isApproved, createdAt(sort: Desc)])
  @@index([source])
  @@index([companyId, rating(sort: Desc), reviewDate(sort: Desc)])
  @@index([isActive])
  @@map("reviews")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  name         String?
  role         String   @default("admin")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([email])
  @@index([role])
  @@map("users")
}

model LegalPage {
  id        Int      @id @default(autoincrement())
  slug      String   @unique
  title     String
  content   String
  domainId  Int?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  domain    Domain?  @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@index([slug, isActive])
  @@index([domainId, isActive])
  @@map("legal_pages")
}

model BusinessOwner {
  id                   String                @id @default(cuid())
  email                String                @unique
  password             String
  firstName            String?
  lastName             String?
  phone                String?
  emailVerified        DateTime?
  phoneVerified        DateTime?
  emailNewReview       Boolean               @default(true)
  emailReviewReply     Boolean               @default(true)
  emailWeeklyDigest    Boolean               @default(false)
  emailMarketing       Boolean               @default(false)
  unsubscribeToken     String                @unique @default(cuid())
  subscriptionTier     String                @default("free")
  subscriptionStatus   String                @default("active")
  subscriptionStart    DateTime?
  subscriptionEnd      DateTime?
  stripeCustomerId     String?               @unique
  stripeSubscriptionId String?               @unique
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean               @default(false)
  trialStart           DateTime?
  trialEnd             DateTime?
  deviceId             String?
  deviceType           String?
  fcmToken             String?
  lastLoginAt          DateTime?
  profileImageUrl      String?
  isEmailVerified      Boolean               @default(false)
  pushNotifications    Boolean               @default(true)
  emailNotifications   Boolean               @default(true)
  marketingEmails      Boolean               @default(false)
  reviewNotifications  Boolean               @default(true)
  aiUsageCount         Int                   @default(0)
  aiUsageResetDate     DateTime?
  aiTotalRequests      Int                   @default(0)
  aiTotalCost          Float                 @default(0)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  apiKeys              ApiKey[]
  apiUsage             ApiUsage[]
  campaignEvents       CampaignEvent[]
  companies            CompanyOwnership[]
  customerJourney      CustomerJourney[]
  customerSegments     CustomerSegment[]
  developerAccount     DeveloperAccount?
  emailTemplates       EmailTemplate[]
  integrations         Integration[]
  invoices             Invoice[]
  leadScores           LeadScore[]
  marketingCampaigns   MarketingCampaign[]
  notifications        Notification[]
  referralsReceived    Referral[]            @relation("Referred")
  referralsGiven       Referral[]            @relation("Referrer")
  reviewReplies        ReviewReply[]
  segmentMemberships   SegmentMember[]
  stripeEvents         StripeEvent[]
  subscriptionHistory  SubscriptionHistory[]
  webhooks             Webhook[]

  @@index([email])
  @@index([unsubscribeToken])
  @@index([subscriptionTier, subscriptionStatus])
  @@map("business_owners")
}

model CompanyOwnership {
  id        String        @id @default(cuid())
  companyId Int
  ownerId   String
  role      String        @default("owner")
  verified  Boolean       @default(false)
  createdAt DateTime      @default(now())
  company   Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  owner     BusinessOwner @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@unique([companyId, ownerId])
  @@index([ownerId])
  @@index([companyId])
  @@map("company_ownerships")
}

model Photo {
  id         String   @id @default(cuid())
  companyId  Int
  url        String
  thumbnail  String?
  caption    String?
  order      Int      @default(0)
  type       String   @default("gallery")
  isPrimary  Boolean  @default(false)
  uploadedBy String?
  createdAt  DateTime @default(now())
  company    Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, order])
  @@index([companyId, type])
  @@map("photos")
}

model BusinessHours {
  id           String   @id @default(cuid())
  companyId    Int      @unique
  monday       Json?
  tuesday      Json?
  wednesday    Json?
  thursday     Json?
  friday       Json?
  saturday     Json?
  sunday       Json?
  specialHours Json?
  timezone     String   @default("Europe/Paris")
  updatedAt    DateTime @updatedAt
  company      Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("business_hours")
}

model CompanyAnalytics {
  id               String   @id @default(cuid())
  companyId        Int
  date             DateTime @default(now()) @db.Date
  profileViews     Int      @default(0)
  uniqueVisitors   Int      @default(0)
  phoneClicks      Int      @default(0)
  websiteClicks    Int      @default(0)
  emailClicks      Int      @default(0)
  directionsClicks Int      @default(0)
  sourceOrganic    Int      @default(0)
  sourceSearch     Int      @default(0)
  sourceDirect     Int      @default(0)
  sourceReferral   Int      @default(0)
  company          Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, date])
  @@index([companyId, date(sort: Desc)])
  @@map("company_analytics")
}

model ReviewReply {
  id        Int           @id @default(autoincrement())
  reviewId  Int           @unique
  ownerId   String
  content   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  owner     BusinessOwner @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  review    Review        @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId])
  @@index([ownerId])
  @@map("review_replies")
}

model ReviewVote {
  id           Int      @id @default(autoincrement())
  reviewId     Int
  voterIp      String
  voterSession String?
  isHelpful    Boolean
  createdAt    DateTime @default(now())
  review       Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([reviewId, voterIp])
  @@index([reviewId])
  @@index([voterIp])
  @@map("review_votes")
}

model ReviewReport {
  id          Int       @id @default(autoincrement())
  reviewId    Int
  reporterIp  String
  reason      String
  description String?
  status      String    @default("pending")
  reviewedAt  DateTime?
  reviewedBy  String?
  createdAt   DateTime  @default(now())
  review      Review    @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId])
  @@index([status])
  @@index([createdAt(sort: Desc)])
  @@map("review_reports")
}

model Referral {
  id             String         @id @default(cuid())
  referrerId     String
  referredId     String?
  code           String         @unique
  clicks         Int            @default(0)
  signups        Int            @default(0)
  conversions    Int            @default(0)
  referrerReward String?
  referredReward String?
  rewardedAt     DateTime?
  status         String         @default("active")
  createdAt      DateTime       @default(now())
  expiresAt      DateTime?
  referred       BusinessOwner? @relation("Referred", fields: [referredId], references: [id])
  referrer       BusinessOwner  @relation("Referrer", fields: [referrerId], references: [id], onDelete: Cascade)

  @@index([code])
  @@index([referrerId])
  @@index([status])
  @@map("referrals")
}

model Coupon {
  id             String             @id @default(cuid())
  companyId      Int
  code           String             @unique
  title          String
  description    String
  terms          String?
  type           String
  value          Float
  minPurchase    Float?
  maxDiscount    Float?
  maxUses        Int?
  maxUsesPerUser Int?               @default(1)
  usedCount      Int                @default(0)
  validFrom      DateTime
  validUntil     DateTime
  isActive       Boolean            @default(true)
  views          Int                @default(0)
  claims         Int                @default(0)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  redemptions    CouponRedemption[]
  company        Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([code])
  @@index([companyId, isActive])
  @@index([validFrom, validUntil])
  @@map("coupons")
}

model CouponRedemption {
  id             String    @id @default(cuid())
  couponId       String
  userId         String?
  userEmail      String?
  userName       String?
  redemptionCode String
  isVerified     Boolean   @default(false)
  verifiedAt     DateTime?
  verifiedBy     String?
  purchaseAmount Float?
  discountAmount Float?
  createdAt      DateTime  @default(now())
  coupon         Coupon    @relation(fields: [couponId], references: [id], onDelete: Cascade)

  @@index([couponId])
  @@index([redemptionCode])
  @@index([createdAt(sort: Desc)])
  @@map("coupon_redemptions")
}

model Notification {
  id          String        @id @default(cuid())
  recipientId String
  type        String
  title       String
  message     String
  companyId   Int?
  isRead      Boolean       @default(false)
  readAt      DateTime?
  sentAt      DateTime      @default(now())
  data        Json?
  createdAt   DateTime      @default(now())
  company     Company?      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  recipient   BusinessOwner @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  @@index([recipientId, isRead])
  @@index([recipientId, sentAt(sort: Desc)])
  @@index([type])
  @@map("notifications")
}

model MarketingCampaign {
  id              String           @id @default(cuid())
  businessOwnerId String
  name            String
  description     String?
  type            String
  status          String           @default("draft")
  triggers        Json
  actions         Json
  segmentId       String?
  startDate       DateTime?
  endDate         DateTime?
  nextRunAt       DateTime?
  analytics       Json             @default("{}")
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  abTests         ABTest[]
  events          CampaignEvent[]
  businessOwner   BusinessOwner    @relation(fields: [businessOwnerId], references: [id], onDelete: Cascade)
  segment         CustomerSegment? @relation(fields: [segmentId], references: [id])

  @@index([businessOwnerId, status])
  @@index([status, nextRunAt])
  @@index([type, status])
  @@map("marketing_campaigns")
}

model CustomerSegment {
  id              String              @id @default(cuid())
  businessOwnerId String
  name            String
  description     String?
  rules           Json
  dynamicRefresh  Boolean             @default(true)
  memberCount     Int                 @default(0)
  lastRefreshed   DateTime?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  businessOwner   BusinessOwner       @relation(fields: [businessOwnerId], references: [id], onDelete: Cascade)
  campaigns       MarketingCampaign[]
  members         SegmentMember[]

  @@index([businessOwnerId])
  @@index([dynamicRefresh, lastRefreshed])
  @@map("customer_segments")
}

model SegmentMember {
  id        String          @id @default(cuid())
  segmentId String
  userId    String
  addedAt   DateTime        @default(now())
  segment   CustomerSegment @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  user      BusinessOwner   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([segmentId, userId])
  @@index([segmentId])
  @@index([userId])
  @@map("segment_members")
}

model LeadScore {
  id          String        @id @default(cuid())
  userId      String
  companyId   Int
  score       Int           @default(0)
  factors     Json          @default("[]")
  lastUpdated DateTime      @default(now())
  company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user        BusinessOwner @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId])
  @@index([companyId, score(sort: Desc)])
  @@index([userId])
  @@map("lead_scores")
}

model CampaignEvent {
  id         String            @id @default(cuid())
  campaignId String
  userId     String
  event      String
  timestamp  DateTime          @default(now())
  metadata   Json?
  campaign   MarketingCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user       BusinessOwner     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([campaignId, event])
  @@index([userId, timestamp(sort: Desc)])
  @@index([event, timestamp(sort: Desc)])
  @@map("campaign_events")
}

model ABTest {
  id         String            @id @default(cuid())
  campaignId String
  name       String
  variants   Json
  status     String            @default("active")
  results    Json              @default("{}")
  startDate  DateTime          @default(now())
  endDate    DateTime?
  campaign   MarketingCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@index([status])
  @@map("ab_tests")
}

model CustomerJourney {
  id         String        @id @default(cuid())
  userId     String
  companyId  Int
  touchpoint String
  timestamp  DateTime      @default(now())
  metadata   Json          @default("{}")
  company    Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user       BusinessOwner @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp(sort: Desc)])
  @@index([companyId, touchpoint])
  @@index([touchpoint, timestamp(sort: Desc)])
  @@map("customer_journey")
}

model EmailTemplate {
  id              String        @id @default(cuid())
  businessOwnerId String
  name            String
  subject         String
  htmlContent     String
  textContent     String?
  category        String        @default("marketing")
  isActive        Boolean       @default(true)
  variables       Json          @default("[]")
  usageCount      Int           @default(0)
  lastUsed        DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  businessOwner   BusinessOwner @relation(fields: [businessOwnerId], references: [id], onDelete: Cascade)

  @@index([businessOwnerId, category])
  @@index([category, isActive])
  @@map("email_templates")
}

model StripeEvent {
  id              String         @id @default(cuid())
  eventType       String
  stripeId        String         @unique
  businessOwnerId String?
  data            Json
  processed       Boolean        @default(false)
  processedAt     DateTime?
  createdAt       DateTime       @default(now())
  businessOwner   BusinessOwner? @relation(fields: [businessOwnerId], references: [id])

  @@index([eventType, processed])
  @@index([businessOwnerId])
  @@index([createdAt(sort: Desc)])
  @@map("stripe_events")
}

model SubscriptionHistory {
  id              String        @id @default(cuid())
  businessOwnerId String
  action          String
  fromPlan        String?
  toPlan          String?
  fromPrice       Float?
  toPrice         Float?
  reason          String?
  stripeEventId   String?
  effectiveDate   DateTime
  createdAt       DateTime      @default(now())
  businessOwner   BusinessOwner @relation(fields: [businessOwnerId], references: [id], onDelete: Cascade)

  @@index([businessOwnerId, effectiveDate(sort: Desc)])
  @@index([action, effectiveDate(sort: Desc)])
  @@map("subscription_history")
}

model Invoice {
  id              String        @id @default(cuid())
  businessOwnerId String
  stripeInvoiceId String        @unique
  number          String?
  status          String
  description     String?
  subtotal        Int
  tax             Int           @default(0)
  total           Int
  amountPaid      Int           @default(0)
  amountDue       Int           @default(0)
  currency        String        @default("eur")
  invoiceDate     DateTime
  dueDate         DateTime?
  paidAt          DateTime?
  voidedAt        DateTime?
  paymentMethod   String?
  paymentStatus   String?
  metadata        Json          @default("{}")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  businessOwner   BusinessOwner @relation(fields: [businessOwnerId], references: [id], onDelete: Cascade)

  @@index([businessOwnerId, invoiceDate(sort: Desc)])
  @@index([status, dueDate])
  @@index([stripeInvoiceId])
  @@map("invoices")
}

model Product {
  id                 String           @id @default(cuid())
  companyId          Int
  name               String
  description        String?
  price              Int
  compareAtPrice     Int?
  type               String
  sku                String?          @unique
  status             String           @default("active")
  images             String[]
  specifications     Json             @default("{}")
  isBookingEnabled   Boolean          @default(false)
  bookingDuration    Int?
  maxAdvanceBooking  Int?
  allowOnlineBooking Boolean          @default(true)
  inventoryTracked   Boolean          @default(false)
  stockQuantity      Int?
  lowStockThreshold  Int?
  categories         String[]
  tags               String[]
  seoTitle           String?
  seoDescription     String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  bookings           Booking[]
  cartItems          CartItem[]
  orderItems         OrderItem[]
  variants           ProductVariant[]
  company            Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, status])
  @@index([type, status])
  @@index([companyId, type])
  @@index([categories])
  @@index([status, createdAt(sort: Desc)])
  @@map("products")
}

model ProductVariant {
  id             String      @id @default(cuid())
  productId      String
  name           String
  sku            String?     @unique
  price          Int?
  compareAtPrice Int?
  stockQuantity  Int?
  isActive       Boolean     @default(true)
  attributes     Json        @default("{}")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  cartItems      CartItem[]
  orderItems     OrderItem[]
  product        Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId, isActive])
  @@map("product_variants")
}

model Booking {
  id               String   @id @default(cuid())
  productId        String
  customerName     String
  customerEmail    String
  customerPhone    String?
  startTime        DateTime
  endTime          DateTime
  status           String   @default("pending")
  confirmationCode String   @unique
  price            Int?
  paymentStatus    String   @default("pending")
  notes            String?
  internalNotes    String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  product          Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId, status])
  @@index([startTime, endTime])
  @@index([customerEmail])
  @@index([confirmationCode])
  @@index([status, startTime])
  @@map("bookings")
}

model CartItem {
  id        String          @id @default(cuid())
  sessionId String
  productId String
  variantId String?
  quantity  Int             @default(1)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@unique([sessionId, productId, variantId])
  @@index([sessionId])
  @@index([productId])
  @@map("cart_items")
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  companyId       Int
  customerEmail   String
  customerName    String
  customerPhone   String?
  shippingAddress Json?
  billingAddress  Json?
  subtotal        Int
  shippingCost    Int         @default(0)
  taxAmount       Int         @default(0)
  discountAmount  Int         @default(0)
  total           Int
  status          String      @default("pending")
  paymentStatus   String      @default("pending")
  trackingNumber  String?
  shippedAt       DateTime?
  deliveredAt     DateTime?
  couponCode      String?
  notes           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  items           OrderItem[]
  company         Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, status])
  @@index([customerEmail])
  @@index([orderNumber])
  @@index([status, createdAt(sort: Desc)])
  @@map("orders")
}

model OrderItem {
  id        String          @id @default(cuid())
  orderId   String
  productId String
  variantId String?
  quantity  Int
  price     Int
  total     Int
  createdAt DateTime        @default(now())
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model ApiKey {
  id              String        @id @default(cuid())
  businessOwnerId String
  name            String
  hashedKey       String        @unique
  permissions     String[]
  lastUsed        DateTime?
  usageCount      Int           @default(0)
  isActive        Boolean       @default(true)
  revokedAt       DateTime?
  rateLimit       Int           @default(1000)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  businessOwner   BusinessOwner @relation(fields: [businessOwnerId], references: [id], onDelete: Cascade)
  usageLogs       ApiUsage[]

  @@index([businessOwnerId])
  @@index([hashedKey])
  @@index([isActive])
  @@map("api_keys")
}

model ApiUsage {
  id              String        @id @default(cuid())
  businessOwnerId String
  apiKeyId        String?
  endpoint        String
  method          String
  statusCode      Int
  responseTime    Int
  userAgent       String?
  ipAddress       String?
  timestamp       DateTime      @default(now())
  apiKey          ApiKey?       @relation(fields: [apiKeyId], references: [id])
  businessOwner   BusinessOwner @relation(fields: [businessOwnerId], references: [id], onDelete: Cascade)

  @@index([businessOwnerId, timestamp(sort: Desc)])
  @@index([endpoint, timestamp(sort: Desc)])
  @@index([statusCode])
  @@map("api_usage")
}

model Webhook {
  id              String        @id @default(cuid())
  businessOwnerId String
  url             String
  events          String[]
  secret          String
  description     String?
  isActive        Boolean       @default(true)
  lastTriggered   DateTime?
  successCount    Int           @default(0)
  failureCount    Int           @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  logs            WebhookLog[]
  businessOwner   BusinessOwner @relation(fields: [businessOwnerId], references: [id], onDelete: Cascade)

  @@index([businessOwnerId])
  @@index([isActive])
  @@map("webhooks")
}

model WebhookLog {
  id         String   @id @default(cuid())
  webhookId  String
  eventType  String
  payload    Json
  success    Boolean
  statusCode Int?
  response   String?
  createdAt  DateTime @default(now())
  webhook    Webhook  @relation(fields: [webhookId], references: [id], onDelete: Cascade)

  @@index([webhookId, createdAt(sort: Desc)])
  @@index([eventType])
  @@index([success])
  @@map("webhook_logs")
}

model Integration {
  id              String               @id @default(cuid())
  businessOwnerId String
  type            String
  name            String
  accessToken     String?
  refreshToken    String?
  webhookUrl      String?
  phoneNumberId   String?
  settings        Json                 @default("{}")
  isActive        Boolean              @default(true)
  lastSync        DateTime?
  syncCount       Int                  @default(0)
  expiresAt       DateTime?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  syncLogs        IntegrationSyncLog[]
  businessOwner   BusinessOwner        @relation(fields: [businessOwnerId], references: [id], onDelete: Cascade)

  @@index([businessOwnerId, type])
  @@index([type, isActive])
  @@map("integrations")
}

model IntegrationSyncLog {
  id             String      @id @default(cuid())
  integrationId  String
  syncType       String
  success        Boolean
  itemsProcessed Int         @default(0)
  itemsSuccess   Int         @default(0)
  itemsError     Int         @default(0)
  error          String?
  startedAt      DateTime
  completedAt    DateTime    @default(now())
  duration       Int
  integration    Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@index([integrationId, completedAt(sort: Desc)])
  @@index([syncType])
  @@map("integration_sync_logs")
}

model DeveloperAccount {
  id               String        @id @default(cuid())
  businessOwnerId  String        @unique
  organizationName String?
  website          String?
  description      String?
  isApproved       Boolean       @default(false)
  approvedAt       DateTime?
  approvedBy       String?
  monthlyQuota     Int           @default(10000)
  currentUsage     Int           @default(0)
  quotaResetDate   DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  businessOwner    BusinessOwner @relation(fields: [businessOwnerId], references: [id], onDelete: Cascade)

  @@index([isApproved])
  @@map("developer_accounts")
}

model ErrorLog {
  id         String    @id @default(cuid())
  message    String
  stack      String?
  url        String?
  userId     String?
  severity   String
  context    Json      @default("{}")
  timestamp  DateTime  @default(now())
  resolved   Boolean   @default(false)
  resolvedAt DateTime?
  resolvedBy String?

  @@index([severity, timestamp(sort: Desc)])
  @@index([resolved, timestamp(sort: Desc)])
  @@index([userId, timestamp(sort: Desc)])
  @@map("error_logs")
}

model PerformanceMetric {
  id        String   @id @default(cuid())
  operation String
  duration  Int
  timestamp DateTime @default(now())
  userId    String?
  success   Boolean
  metadata  Json     @default("{}")

  @@index([operation, timestamp(sort: Desc)])
  @@index([success, duration(sort: Desc)])
  @@index([timestamp(sort: Desc)])
  @@map("performance_metrics")
}

model HealthCheckLog {
  id           String   @id @default(cuid())
  service      String
  status       String
  responseTime Int
  error        String?
  timestamp    DateTime @default(now())
  metadata     Json     @default("{}")

  @@index([service, timestamp(sort: Desc)])
  @@index([status, timestamp(sort: Desc)])
  @@map("health_check_logs")
}

model BusinessCategory {
  id             Int      @id @default(autoincrement())
  googleCategory String   @unique
  frenchName     String
  germanName     String?
  englishName    String?
  description    String?
  icon           String?
  order          Int      @default(0)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([googleCategory])
  @@index([order])
  @@index([isActive])
  @@map("business_categories")
}

model DashboardLayout {
  id        String   @id @default(cuid())
  tenantId  String
  userId    String
  widgets   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tenantId, userId])
  @@index([tenantId])
  @@index([userId])
  @@map("dashboard_layouts")
}

model SubscriptionPlan {
  id              String                @id @default(cuid())
  name            String
  slug            String                @unique
  description     String
  monthlyPrice    Int
  yearlyPrice     Int?
  trialDays       Int                   @default(14)
  features        String[]
  maxListings     Int                   @default(1)
  maxFeaturedDays Int                   @default(30)
  isActive        Boolean               @default(true)
  displayOrder    Int                   @default(0)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  subscriptions   CompanySubscription[]

  @@index([slug])
  @@index([isActive])
  @@map("subscription_plans")
}

model CompanySubscription {
  id                   String           @id @default(cuid())
  companyId            Int              @unique
  planId               String
  status               String           @default("active")
  startDate            DateTime         @default(now())
  renewalDate          DateTime
  cancelDate           DateTime?
  trialEndDate         DateTime?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  stripeInvoiceId      String?
  pricePaid            Int?
  autoRenew            Boolean          @default(true)
  billingCycleStart    DateTime
  billingCycleEnd      DateTime
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  company              Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  plan                 SubscriptionPlan @relation(fields: [planId], references: [id])

  @@index([status, renewalDate])
  @@index([companyId, status])
  @@index([planId])
  @@map("company_subscriptions")
}

model DomainPricing {
  id               String   @id @default(cuid())
  domainId         Int      @unique
  basicMonthly     Int
  basicYearly      Int?
  proMonthly       Int
  proYearly        Int?
  premiumMonthly   Int
  premiumYearly    Int?
  discountPercent  Int      @default(0)
  discountCode     String?
  featuredBronze   Int?
  featuredSilver   Int?
  featuredGold     Int?
  featuredPlatinum Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("domain_pricing")
}

model PaymentMethod {
  id                    String   @id @default(cuid())
  companyId             Int
  type                  String
  stripePaymentMethodId String?  @unique
  cardBrand             String?
  cardLast4             String?
  cardExpMonth          Int?
  cardExpYear           Int?
  bankAccountLast4      String?
  bankBic               String?
  isDefault             Boolean  @default(false)
  isExpired             Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([companyId])
  @@index([stripePaymentMethodId])
  @@map("payment_methods")
}
