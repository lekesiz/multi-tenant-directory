// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Domain (Alan Adı) Yönetimi
model Domain {
  id              Int      @id @default(autoincrement())
  name            String   @unique // örn: 'haguenau.pro'
  isActive        Boolean  @default(true)
  siteTitle       String?
  siteDescription String?  @db.Text
  logoUrl         String?
  primaryColor    String?  @default("#3B82F6")
  settings        Json?    // Ek site ayarları
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  content CompanyContent[] @relation("DomainContent")
  legalPages LegalPage[]

  @@index([name, isActive])
  @@index([isActive])
  @@index([createdAt(sort: Desc)])
  @@map("domains")
}

// Şirket Ana Bilgileri
model Company {
  id             Int       @id @default(autoincrement())
  name           String
  slug           String    @unique
  googlePlaceId  String?   @unique
  address        String?
  city           String?
  postalCode     String?
  phone          String?
  email          String?
  website        String?
  latitude       Float?
  longitude      Float?
  businessHours  Json?     // Çalışma saatleri (deprecated - use BusinessHours model)
  categories     String[]  // İş kategorileri
  logoUrl        String?
  coverImageUrl  String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  rating         Float?    // Google'dan gelen ortalama puan
  reviewCount    Int       @default(0) // Toplam yorum sayısı

  content        CompanyContent[]
  reviews        Review[]
  ownerships     CompanyOwnership[]
  photos         Photo[]
  hours          BusinessHours?
  analytics      CompanyAnalytics[]

  @@index([slug])
  @@index([city])
  @@index([latitude, longitude])
  @@index([rating(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@index([googlePlaceId])
  @@map("companies")
}

// Şirketlerin Domain'lerdeki Özel İçerikleri
model CompanyContent {
  id                 Int      @id @default(autoincrement())
  companyId          Int
  domainId           Int
  isVisible          Boolean  @default(false)
  
  // Özelleştirilebilir İçerik
  customDescription  String?  @db.Text // Domain'e özel açıklama
  customImages       Json?    // Özel görseller array
  promotions         String?  @db.Text // Özel promosyonlar
  specialOffers      String?  @db.Text // Özel teklifler
  highlightedServices String[] // Öne çıkan hizmetler
  customTags         String[] // Özel etiketler
  
  // SEO
  metaTitle          String?
  metaDescription    String?
  
  // Özel Alanlar
  customFields       Json?    // Ek özel alanlar (JSON)
  
  // Zamanlama
  featuredUntil      DateTime? // Öne çıkarma bitiş tarihi
  priority           Int       @default(0) // Sıralama önceliği (0-100)
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  company            Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  domain             Domain   @relation("DomainContent", fields: [domainId], references: [id], onDelete: Cascade)

  @@unique([companyId, domainId])
  @@index([domainId, isVisible])
  @@index([domainId, isVisible, priority(sort: Desc)])
  @@index([companyId, domainId])
  @@index([updatedAt(sort: Desc)])
  @@map("company_content")
}

// Yorumlar (Google + Manuel)
model Review {
  id           Int      @id @default(autoincrement())
  companyId    Int
  authorName   String
  authorPhoto  String?
  authorEmail  String?  // For contact if needed
  rating       Int      // 1-5 arası
  comment      String?  @db.Text
  photos       String[] // Array of photo URLs (max 5)
  source       String   @default("manual") // "google" veya "manual"
  reviewDate   DateTime @default(now())
  isApproved   Boolean  @default(true)
  isVerified   Boolean  @default(false) // Verified purchase badge
  verifiedAt   DateTime?
  verifiedBy   String?  // BusinessOwner ID who verified
  helpfulCount Int      @default(0) // Count of helpful votes
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  company      Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  reply        ReviewReply?
  votes        ReviewVote[]
  reports      ReviewReport[]

  @@index([companyId, isApproved, reviewDate(sort: Desc)])
  @@index([isApproved, createdAt(sort: Desc)])
  @@index([source])
  @@index([companyId, rating(sort: Desc), reviewDate(sort: Desc)])
  @@map("reviews")
}

// Yönetim Paneli Kullanıcıları
model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  passwordHash  String
  name          String?
  role          String   @default("admin") // admin, editor vb.
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([email])
  @@index([role])
  @@map("users")
}

// Yasal Sayfalar (Footer Pages)
model LegalPage {
  id          Int      @id @default(autoincrement())
  slug        String   @unique // mentions-legales, politique-confidentialite, cgu, tarifs
  title       String
  content     String   @db.Text
  domainId    Int?     // Null ise tüm domain'ler için geçerli
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  domain      Domain?  @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@index([slug, isActive])
  @@index([domainId, isActive])
  @@map("legal_pages")
}

// İşletme Sahipleri (Business Owners Dashboard)
model BusinessOwner {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String   // Hashed with bcrypt
  firstName     String?
  lastName      String?
  phone         String?
  emailVerified DateTime?
  phoneVerified DateTime?
  
  // Email preferences
  emailNewReview       Boolean  @default(true)  // Receive email on new review
  emailReviewReply     Boolean  @default(true)  // Receive email when someone replies to their review
  emailWeeklyDigest    Boolean  @default(false) // Weekly summary email
  emailMarketing       Boolean  @default(false) // Marketing and promotional emails
  unsubscribeToken     String   @unique @default(cuid())
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  companies     CompanyOwnership[]
  reviewReplies ReviewReply[]

  @@index([email])
  @@index([unsubscribeToken])
  @@map("business_owners")
}

// Şirket Sahipliği (Çoktan Çoğa İlişki)
model CompanyOwnership {
  id          String   @id @default(cuid())
  companyId   Int
  ownerId     String
  role        String   @default("owner") // owner, manager, editor
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())

  company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  owner       BusinessOwner @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@unique([companyId, ownerId])
  @@index([ownerId])
  @@index([companyId])
  @@map("company_ownerships")
}

// Fotoğraf Galerisi
model Photo {
  id          String   @id @default(cuid())
  companyId   Int
  url         String   // Vercel Blob URL
  thumbnail   String?  // Thumbnail URL
  caption     String?
  order       Int      @default(0)
  type        String   @default("gallery") // logo, cover, gallery, interior, product
  isPrimary   Boolean  @default(false)
  uploadedBy  String?  // BusinessOwner ID
  createdAt   DateTime @default(now())

  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, order])
  @@index([companyId, type])
  @@map("photos")
}

// Çalışma Saatleri
model BusinessHours {
  id          String   @id @default(cuid())
  companyId   Int      @unique

  // Weekly hours (JSON format)
  monday      Json?    // { open: "09:00", close: "18:00", closed: false }
  tuesday     Json?
  wednesday   Json?
  thursday    Json?
  friday      Json?
  saturday    Json?
  sunday      Json?

  // Special hours (holidays, etc.)
  specialHours Json?   // [{ date: "2025-12-25", closed: true, note: "Noël" }]

  timezone    String   @default("Europe/Paris")
  updatedAt   DateTime @updatedAt

  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("business_hours")
}

// Şirket İstatistikleri (Analytics)
model CompanyAnalytics {
  id              String   @id @default(cuid())
  companyId       Int
  date            DateTime @default(now()) @db.Date

  // View metrics
  profileViews    Int      @default(0)
  uniqueVisitors  Int      @default(0)

  // Click metrics
  phoneClicks     Int      @default(0)
  websiteClicks   Int      @default(0)
  emailClicks     Int      @default(0)
  directionsClicks Int     @default(0)

  // Source metrics
  sourceOrganic   Int      @default(0)
  sourceSearch    Int      @default(0)
  sourceDirect    Int      @default(0)
  sourceReferral  Int      @default(0)

  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, date])
  @@index([companyId, date(sort: Desc)])
  @@map("company_analytics")
}

// Review Reply model - Business owners can reply to reviews
model ReviewReply {
  id          Int      @id @default(autoincrement())
  reviewId    Int      @unique
  ownerId     String   // BusinessOwner ID
  content     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  review      Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  owner       BusinessOwner @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([reviewId])
  @@index([ownerId])
  @@map("review_replies")
}

// Review Vote model - Users can vote reviews as helpful
model ReviewVote {
  id          Int      @id @default(autoincrement())
  reviewId    Int
  voterIp     String   // IP address to prevent duplicates
  voterSession String? // Session ID for additional tracking
  isHelpful   Boolean  // true = helpful, false = not helpful
  createdAt   DateTime @default(now())

  review      Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([reviewId, voterIp])
  @@index([reviewId])
  @@index([voterIp])
  @@map("review_votes")
}

// Review Report model - Users can report inappropriate reviews
model ReviewReport {
  id          Int      @id @default(autoincrement())
  reviewId    Int
  reporterIp  String   // IP address
  reason      String   // spam, offensive, fake, other
  description String?  @db.Text
  status      String   @default("pending") // pending, reviewed, resolved, dismissed
  reviewedAt  DateTime?
  reviewedBy  String?  // Admin user ID
  createdAt   DateTime @default(now())

  review      Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId])
  @@index([status])
  @@index([createdAt(sort: Desc)])
  @@map("review_reports")
}
