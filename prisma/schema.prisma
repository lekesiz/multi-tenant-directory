// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Domain (Alan Adı) Yönetimi
model Domain {
  id              Int      @id @default(autoincrement())
  name            String   @unique // örn: 'haguenau.pro'
  isActive        Boolean  @default(true)
  siteTitle       String?
  siteDescription String?  @db.Text
  logoUrl         String?
  primaryColor    String?  @default("#3B82F6")
  settings        Json?    // Ek site ayarları
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  content CompanyContent[] @relation("DomainContent")
  legalPages LegalPage[]

  @@index([name, isActive])
  @@index([isActive])
  @@index([createdAt(sort: Desc)])
  @@map("domains")
}

// Şirket Ana Bilgileri
model Company {
  id             Int       @id @default(autoincrement())
  name           String
  slug           String    @unique
  googlePlaceId  String?   @unique
  address        String?
  city           String?
  postalCode     String?
  phone          String?
  email          String?
  website        String?
  latitude       Float?
  longitude      Float?
  businessHours  Json?     // Çalışma saatleri (deprecated - use BusinessHours model)
  categories     String[]  // İş kategorileri
  logoUrl        String?
  coverImageUrl  String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  rating         Float?    // Google'dan gelen ortalama puan
  reviewCount    Int       @default(0) // Toplam yorum sayısı

  content        CompanyContent[]
  reviews        Review[]
  ownerships     CompanyOwnership[]
  photos         Photo[]
  hours          BusinessHours?
  analytics      CompanyAnalytics[]
  coupons        Coupon[]
  notifications  Notification[]
  leadScores     LeadScore[]
  customerJourney CustomerJourney[]

  @@index([slug])
  @@index([city])
  @@index([latitude, longitude])
  @@index([rating(sort: Desc)])
  @@index([createdAt(sort: Desc)])
  @@index([googlePlaceId])
  @@map("companies")
}

// Şirketlerin Domain'lerdeki Özel İçerikleri
model CompanyContent {
  id                 Int      @id @default(autoincrement())
  companyId          Int
  domainId           Int
  isVisible          Boolean  @default(false)
  
  // Özelleştirilebilir İçerik
  customDescription  String?  @db.Text // Domain'e özel açıklama
  customImages       Json?    // Özel görseller array
  promotions         String?  @db.Text // Özel promosyonlar
  specialOffers      String?  @db.Text // Özel teklifler
  highlightedServices String[] // Öne çıkan hizmetler
  customTags         String[] // Özel etiketler
  
  // SEO
  metaTitle          String?
  metaDescription    String?
  
  // Özel Alanlar
  customFields       Json?    // Ek özel alanlar (JSON)
  
  // Zamanlama
  featuredUntil      DateTime? // Öne çıkarma bitiş tarihi
  priority           Int       @default(0) // Sıralama önceliği (0-100)
  
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  company            Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  domain             Domain   @relation("DomainContent", fields: [domainId], references: [id], onDelete: Cascade)

  @@unique([companyId, domainId])
  @@index([domainId, isVisible])
  @@index([domainId, isVisible, priority(sort: Desc)])
  @@index([companyId, domainId])
  @@index([updatedAt(sort: Desc)])
  @@map("company_content")
}

// Yorumlar (Google + Manuel)
model Review {
  id           Int      @id @default(autoincrement())
  companyId    Int
  authorName   String
  authorPhoto  String?
  authorEmail  String?  // For contact if needed
  rating       Int      // 1-5 arası
  comment      String?  @db.Text
  photos       String[] // Array of photo URLs (max 5)
  source       String   @default("manual") // "google" veya "manual"
  reviewDate   DateTime @default(now())
  isApproved   Boolean  @default(true)
  isVerified   Boolean  @default(false) // Verified purchase badge
  verifiedAt   DateTime?
  verifiedBy   String?  // BusinessOwner ID who verified
  helpfulCount Int      @default(0) // Count of helpful votes
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  company      Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  reply        ReviewReply?
  votes        ReviewVote[]
  reports      ReviewReport[]

  @@index([companyId, isApproved, reviewDate(sort: Desc)])
  @@index([isApproved, createdAt(sort: Desc)])
  @@index([source])
  @@index([companyId, rating(sort: Desc), reviewDate(sort: Desc)])
  @@map("reviews")
}

// Yönetim Paneli Kullanıcıları
model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  passwordHash  String
  name          String?
  role          String   @default("admin") // admin, editor vb.
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([email])
  @@index([role])
  @@map("users")
}

// Yasal Sayfalar (Footer Pages)
model LegalPage {
  id          Int      @id @default(autoincrement())
  slug        String   @unique // mentions-legales, politique-confidentialite, cgu, tarifs
  title       String
  content     String   @db.Text
  domainId    Int?     // Null ise tüm domain'ler için geçerli
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  domain      Domain?  @relation(fields: [domainId], references: [id], onDelete: Cascade)

  @@index([slug, isActive])
  @@index([domainId, isActive])
  @@map("legal_pages")
}

// İşletme Sahipleri (Business Owners Dashboard)
model BusinessOwner {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String   // Hashed with bcrypt
  firstName     String?
  lastName      String?
  phone         String?
  emailVerified DateTime?
  phoneVerified DateTime?
  
  // Email preferences
  emailNewReview       Boolean  @default(true)  // Receive email on new review
  emailReviewReply     Boolean  @default(true)  // Receive email when someone replies to their review
  emailWeeklyDigest    Boolean  @default(false) // Weekly summary email
  emailMarketing       Boolean  @default(false) // Marketing and promotional emails
  unsubscribeToken     String   @unique @default(cuid())
  
  // Subscription & Billing
  subscriptionTier     String   @default("free") // "free", "basic", "pro", "enterprise"
  subscriptionStatus   String   @default("active") // "active", "canceled", "past_due", "trialing"
  subscriptionStart    DateTime?
  subscriptionEnd      DateTime?
  stripeCustomerId     String?  @unique
  stripeSubscriptionId String?  @unique
  currentPeriodStart   DateTime?
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean  @default(false)
  trialStart           DateTime?
  trialEnd             DateTime?

  // Mobile App Support
  deviceId             String?
  deviceType           String?  // "ios" or "android"
  fcmToken             String?  // Firebase Cloud Messaging token
  lastLoginAt          DateTime?
  profileImageUrl      String?
  isEmailVerified      Boolean  @default(false)
  
  // Notification Preferences
  pushNotifications    Boolean  @default(true)
  emailNotifications   Boolean  @default(true)
  marketingEmails      Boolean  @default(false)
  reviewNotifications  Boolean  @default(true)

  // AI Usage Tracking
  aiUsageCount         Int      @default(0) // Daily AI request count
  aiUsageResetDate     DateTime? // Date when usage count resets (24h)
  aiTotalRequests      Int      @default(0) // Lifetime AI requests
  aiTotalCost          Float    @default(0) // Total cost in cents

  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  companies     CompanyOwnership[]
  reviewReplies ReviewReply[]
  referralsGiven Referral[] @relation("Referrer")
  referralsReceived Referral[] @relation("Referred")
  notifications Notification[]
  
  // Marketing Automation Relations
  marketingCampaigns MarketingCampaign[]
  customerSegments CustomerSegment[]
  segmentMemberships SegmentMember[]
  leadScores LeadScore[]
  campaignEvents CampaignEvent[]
  customerJourney CustomerJourney[]
  emailTemplates EmailTemplate[]
  
  // Stripe Relations
  stripeEvents StripeEvent[]
  subscriptionHistory SubscriptionHistory[]
  invoices Invoice[]

  @@index([email])
  @@index([unsubscribeToken])
  @@index([subscriptionTier, subscriptionStatus])
  @@map("business_owners")
}

// Şirket Sahipliği (Çoktan Çoğa İlişki)
model CompanyOwnership {
  id          String   @id @default(cuid())
  companyId   Int
  ownerId     String
  role        String   @default("owner") // owner, manager, editor
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())

  company     Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  owner       BusinessOwner @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@unique([companyId, ownerId])
  @@index([ownerId])
  @@index([companyId])
  @@map("company_ownerships")
}

// Fotoğraf Galerisi
model Photo {
  id          String   @id @default(cuid())
  companyId   Int
  url         String   // Vercel Blob URL
  thumbnail   String?  // Thumbnail URL
  caption     String?
  order       Int      @default(0)
  type        String   @default("gallery") // logo, cover, gallery, interior, product
  isPrimary   Boolean  @default(false)
  uploadedBy  String?  // BusinessOwner ID
  createdAt   DateTime @default(now())

  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId, order])
  @@index([companyId, type])
  @@map("photos")
}

// Çalışma Saatleri
model BusinessHours {
  id          String   @id @default(cuid())
  companyId   Int      @unique

  // Weekly hours (JSON format)
  monday      Json?    // { open: "09:00", close: "18:00", closed: false }
  tuesday     Json?
  wednesday   Json?
  thursday    Json?
  friday      Json?
  saturday    Json?
  sunday      Json?

  // Special hours (holidays, etc.)
  specialHours Json?   // [{ date: "2025-12-25", closed: true, note: "Noël" }]

  timezone    String   @default("Europe/Paris")
  updatedAt   DateTime @updatedAt

  company     Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("business_hours")
}

// Şirket İstatistikleri (Analytics)
model CompanyAnalytics {
  id              String   @id @default(cuid())
  companyId       Int
  date            DateTime @default(now()) @db.Date

  // View metrics
  profileViews    Int      @default(0)
  uniqueVisitors  Int      @default(0)

  // Click metrics
  phoneClicks     Int      @default(0)
  websiteClicks   Int      @default(0)
  emailClicks     Int      @default(0)
  directionsClicks Int     @default(0)

  // Source metrics
  sourceOrganic   Int      @default(0)
  sourceSearch    Int      @default(0)
  sourceDirect    Int      @default(0)
  sourceReferral  Int      @default(0)

  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([companyId, date])
  @@index([companyId, date(sort: Desc)])
  @@map("company_analytics")
}

// Review Reply model - Business owners can reply to reviews
model ReviewReply {
  id          Int      @id @default(autoincrement())
  reviewId    Int      @unique
  ownerId     String   // BusinessOwner ID
  content     String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  review      Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  owner       BusinessOwner @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([reviewId])
  @@index([ownerId])
  @@map("review_replies")
}

// Review Vote model - Users can vote reviews as helpful
model ReviewVote {
  id          Int      @id @default(autoincrement())
  reviewId    Int
  voterIp     String   // IP address to prevent duplicates
  voterSession String? // Session ID for additional tracking
  isHelpful   Boolean  // true = helpful, false = not helpful
  createdAt   DateTime @default(now())

  review      Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@unique([reviewId, voterIp])
  @@index([reviewId])
  @@index([voterIp])
  @@map("review_votes")
}

// Review Report model - Users can report inappropriate reviews
model ReviewReport {
  id          Int      @id @default(autoincrement())
  reviewId    Int
  reporterIp  String   // IP address
  reason      String   // spam, offensive, fake, other
  description String?  @db.Text
  status      String   @default("pending") // pending, reviewed, resolved, dismissed
  reviewedAt  DateTime?
  reviewedBy  String?  // Admin user ID
  createdAt   DateTime @default(now())

  review      Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId])
  @@index([status])
  @@index([createdAt(sort: Desc)])
  @@map("review_reports")
}

// Referral Program - Viral Growth
model Referral {
  id              String   @id @default(cuid())
  referrerId      String   // Business owner who refers
  referredId      String?  // Business owner who was referred
  code            String   @unique // Unique referral code (e.g., "CAFE123")

  // Tracking
  clicks          Int      @default(0)
  signups         Int      @default(0)
  conversions     Int      @default(0) // Paid subscriptions

  // Rewards
  referrerReward  String?  // "1_month_free", "50_euro_credit", "lifetime_pro"
  referredReward  String?  // "50_percent_discount", "14_day_trial"
  rewardedAt      DateTime?

  status          String   @default("active") // "active", "completed", "expired"

  createdAt       DateTime @default(now())
  expiresAt       DateTime?

  referrer        BusinessOwner  @relation("Referrer", fields: [referrerId], references: [id], onDelete: Cascade)
  referred        BusinessOwner? @relation("Referred", fields: [referredId], references: [id], onDelete: SetNull)

  @@index([code])
  @@index([referrerId])
  @@index([status])
  @@map("referrals")
}

// Coupons & Promotions
model Coupon {
  id              String   @id @default(cuid())
  companyId       Int
  code            String   @unique // "SUMMER2025", "WELCOME20"

  title           String   // "20% de réduction"
  description     String   @db.Text
  terms           String?  @db.Text // Terms and conditions

  type            String   // "percentage", "fixed_amount", "free_item"
  value           Float    // 20 (for 20%) or 10 (for €10 off)

  minPurchase     Float?   // Minimum purchase amount
  maxDiscount     Float?   // Maximum discount amount (for percentage)
  maxUses         Int?     // Total redemption limit
  maxUsesPerUser  Int?     @default(1)

  usedCount       Int      @default(0)

  validFrom       DateTime
  validUntil      DateTime

  isActive        Boolean  @default(true)

  // Tracking
  views           Int      @default(0)
  claims          Int      @default(0)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  redemptions     CouponRedemption[]

  @@index([code])
  @@index([companyId, isActive])
  @@index([validFrom, validUntil])
  @@map("coupons")
}

// Coupon Redemption Tracking
model CouponRedemption {
  id              String   @id @default(cuid())
  couponId        String
  userId          String?  // User who redeemed (if logged in)
  userEmail       String?
  userName        String?

  redemptionCode  String   // Unique code shown to cashier
  isVerified      Boolean  @default(false) // Verified by business owner
  verifiedAt      DateTime?
  verifiedBy      String?  // BusinessOwner ID

  purchaseAmount  Float?
  discountAmount  Float?

  createdAt       DateTime @default(now())

  coupon          Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)

  @@index([couponId])
  @@index([redemptionCode])
  @@index([createdAt(sort: Desc)])
  @@map("coupon_redemptions")
}

// Push Notifications
model Notification {
  id              String   @id @default(cuid())
  recipientId     String   // BusinessOwner ID
  type            String   // "new_review", "marketing_blast", "system_announcement"
  title           String
  message         String   @db.Text
  companyId       Int?     // Related company (optional)
  
  // Status
  isRead          Boolean  @default(false)
  readAt          DateTime?
  sentAt          DateTime @default(now())
  
  // Metadata
  data            Json?    // Additional data for the notification
  
  createdAt       DateTime @default(now())
  
  recipient       BusinessOwner @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  company         Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@index([recipientId, isRead])
  @@index([recipientId, sentAt(sort: Desc)])
  @@index([type])
  @@map("notifications")
}

// Marketing Automation System
model MarketingCampaign {
  id              String   @id @default(cuid())
  businessOwnerId String
  name            String
  description     String?  @db.Text
  type            String   // "email", "sms", "push", "automation"
  status          String   @default("draft") // "draft", "active", "paused", "completed"
  
  // Campaign Configuration
  triggers        Json     // Array of trigger conditions
  actions         Json     // Array of actions to execute
  segmentId       String?  // Target segment (optional)
  
  // Scheduling
  startDate       DateTime?
  endDate         DateTime?
  nextRunAt       DateTime?
  
  // Analytics
  analytics       Json     @default("{}")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  businessOwner   BusinessOwner @relation(fields: [businessOwnerId], references: [id], onDelete: Cascade)
  segment         CustomerSegment? @relation(fields: [segmentId], references: [id], onDelete: SetNull)
  events          CampaignEvent[]
  abTests         ABTest[]
  
  @@index([businessOwnerId, status])
  @@index([status, nextRunAt])
  @@index([type, status])
  @@map("marketing_campaigns")
}

// Customer Segmentation
model CustomerSegment {
  id              String   @id @default(cuid())
  businessOwnerId String
  name            String
  description     String?  @db.Text
  rules           Json     // Segmentation rules
  dynamicRefresh  Boolean  @default(true)
  
  memberCount     Int      @default(0)
  lastRefreshed   DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  businessOwner   BusinessOwner @relation(fields: [businessOwnerId], references: [id], onDelete: Cascade)
  members         SegmentMember[]
  campaigns       MarketingCampaign[]
  
  @@index([businessOwnerId])
  @@index([dynamicRefresh, lastRefreshed])
  @@map("customer_segments")
}

// Segment Membership
model SegmentMember {
  id              String   @id @default(cuid())
  segmentId       String
  userId          String   // BusinessOwner ID
  addedAt         DateTime @default(now())
  
  segment         CustomerSegment @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  user            BusinessOwner @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([segmentId, userId])
  @@index([segmentId])
  @@index([userId])
  @@map("segment_members")
}

// Lead Scoring
model LeadScore {
  id              String   @id @default(cuid())
  userId          String   // BusinessOwner ID
  companyId       Int
  score           Int      @default(0)
  factors         Json     @default("[]") // Array of scoring factors
  lastUpdated     DateTime @default(now())
  
  user            BusinessOwner @relation(fields: [userId], references: [id], onDelete: Cascade)
  company         Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@unique([userId, companyId])
  @@index([companyId, score(sort: Desc)])
  @@index([userId])
  @@map("lead_scores")
}

// Campaign Event Tracking
model CampaignEvent {
  id              String   @id @default(cuid())
  campaignId      String
  userId          String   // BusinessOwner ID
  event           String   // "sent", "delivered", "opened", "clicked", "converted"
  timestamp       DateTime @default(now())
  metadata        Json?
  
  campaign        MarketingCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user            BusinessOwner @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([campaignId, event])
  @@index([userId, timestamp(sort: Desc)])
  @@index([event, timestamp(sort: Desc)])
  @@map("campaign_events")
}

// A/B Testing
model ABTest {
  id              String   @id @default(cuid())
  campaignId      String
  name            String
  variants        Json     // Array of test variants
  status          String   @default("active") // "active", "paused", "completed"
  results         Json     @default("{}")
  
  startDate       DateTime @default(now())
  endDate         DateTime?
  
  campaign        MarketingCampaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  @@index([campaignId])
  @@index([status])
  @@map("ab_tests")
}

// Customer Journey Tracking
model CustomerJourney {
  id              String   @id @default(cuid())
  userId          String   // BusinessOwner ID
  companyId       Int
  touchpoint      String   // "website_visit", "email_open", "form_submit", etc.
  timestamp       DateTime @default(now())
  metadata        Json     @default("{}")
  
  user            BusinessOwner @relation(fields: [userId], references: [id], onDelete: Cascade)
  company         Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  
  @@index([userId, timestamp(sort: Desc)])
  @@index([companyId, touchpoint])
  @@index([touchpoint, timestamp(sort: Desc)])
  @@map("customer_journey")
}

// Email Templates
model EmailTemplate {
  id              String   @id @default(cuid())
  businessOwnerId String
  name            String
  subject         String
  htmlContent     String   @db.Text
  textContent     String?  @db.Text
  category        String   @default("marketing") // "marketing", "transactional", "automation"
  isActive        Boolean  @default(true)
  
  // Template variables
  variables       Json     @default("[]")
  
  // Analytics
  usageCount      Int      @default(0)
  lastUsed        DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  businessOwner   BusinessOwner @relation(fields: [businessOwnerId], references: [id], onDelete: Cascade)
  
  @@index([businessOwnerId, category])
  @@index([category, isActive])
  @@map("email_templates")
}

// Stripe Events Tracking
model StripeEvent {
  id              String   @id @default(cuid())
  eventType       String   // "checkout.session.completed", "invoice.paid", etc.
  stripeId        String   @unique // Stripe event ID or object ID
  businessOwnerId String?  // Related business owner (optional)
  data            Json     // Event data
  processed       Boolean  @default(false)
  processedAt     DateTime?
  createdAt       DateTime @default(now())
  
  businessOwner   BusinessOwner? @relation(fields: [businessOwnerId], references: [id], onDelete: SetNull)
  
  @@index([eventType, processed])
  @@index([businessOwnerId])
  @@index([createdAt(sort: Desc)])
  @@map("stripe_events")
}

// Subscription History
model SubscriptionHistory {
  id              String   @id @default(cuid())
  businessOwnerId String
  action          String   // "created", "updated", "canceled", "reactivated"
  fromPlan        String?  // Previous plan
  toPlan          String?  // New plan
  fromPrice       Float?
  toPrice         Float?
  reason          String?  // Reason for change
  stripeEventId   String?  // Related Stripe event
  
  effectiveDate   DateTime
  createdAt       DateTime @default(now())
  
  businessOwner   BusinessOwner @relation(fields: [businessOwnerId], references: [id], onDelete: Cascade)
  
  @@index([businessOwnerId, effectiveDate(sort: Desc)])
  @@index([action, effectiveDate(sort: Desc)])
  @@map("subscription_history")
}

// Invoices and Billing
model Invoice {
  id              String   @id @default(cuid())
  businessOwnerId String
  stripeInvoiceId String   @unique
  
  // Invoice details
  number          String?
  status          String   // "draft", "open", "paid", "void", "uncollectible"
  description     String?
  
  // Amounts (in cents)
  subtotal        Int
  tax             Int      @default(0)
  total           Int
  amountPaid      Int      @default(0)
  amountDue       Int      @default(0)
  
  currency        String   @default("eur")
  
  // Dates
  invoiceDate     DateTime
  dueDate         DateTime?
  paidAt          DateTime?
  voidedAt        DateTime?
  
  // Payment
  paymentMethod   String?  // "card", "sepa_debit", etc.
  paymentStatus   String?  // "succeeded", "failed", "pending"
  
  // Metadata
  metadata        Json     @default("{}")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  businessOwner   BusinessOwner @relation(fields: [businessOwnerId], references: [id], onDelete: Cascade)
  
  @@index([businessOwnerId, invoiceDate(sort: Desc)])
  @@index([status, dueDate])
  @@index([stripeInvoiceId])
  @@map("invoices")
}
